[
  {
    "objectID": "quickstarts/Text_Generation.html",
    "href": "quickstarts/Text_Generation.html",
    "title": "Text Generation",
    "section": "",
    "text": "Text Generation\nGenerating text using gemini\n\nconst dotenv = require(\"dotenv\") as typeof import(\"dotenv\");\nconst google = require(\"@google/genai\") as typeof import(\"@google/genai\");\nconst tslab = require(\"tslab\") as typeof import(\"tslab\");\n\n\ndotenv.config({\n  path: \"../.env\",\n});\nconsole.log(\"Secrets Loaded from .env file\");\n\nSecrets Loaded from .env file\n\n\n\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY ?? \"\";\nconst ai = new google.GoogleGenAI({ apiKey: GEMINI_API_KEY });\n\nasync function main() {\n  const response = await ai.models.generateContent({\n    model: \"gemini-2.0-flash-001\",\n    contents: \"Why is the sky blue?\",\n  });\n  console.log(response.text);\n}\n\n\n// @ts-nocheck - tslab allows top level awaits\nawait main();\n\nThe sky appears blue due to a phenomenon called **Rayleigh scattering**. Here's a breakdown:\n\n*   **Sunlight and the Atmosphere:** Sunlight, which looks white to us, is actually made up of all the colors of the rainbow. When sunlight enters the Earth's atmosphere, it collides with tiny air molecules (mostly nitrogen and oxygen).\n\n*   **Scattering:** This collision causes the light to scatter in different directions.\n\n*   **Rayleigh Scattering:** Rayleigh scattering is a type of scattering that affects light with short wavelengths (like blue and violet) much more strongly than light with longer wavelengths (like red and orange). This means blue and violet light are scattered around the atmosphere far more than other colors.\n\n*   **Why Blue and Not Violet?** Violet light is scattered even more than blue light. However, there are a few reasons why we see a blue sky instead of a violet one:\n    *   **Sunlight's Spectrum:** The sun emits slightly less violet light than blue light.\n    *   **Atmospheric Absorption:** Some violet light is absorbed by the upper atmosphere.\n    *   **Our Eyes:** Our eyes are more sensitive to blue light than violet light.\n\n*   **The Result:** Because blue light is scattered more effectively throughout the atmosphere, it reaches our eyes from all directions, making the sky appear blue.\n\nIn summary, Rayleigh scattering is the scattering of electromagnetic radiation (of which light is a form) by particles of a much smaller wavelength. It causes the sky to be blue.\n\n\n\n\nimport { ContentListUnion, FileState } from \"@google/genai\";\n\nconst image_url = \"https://storage.googleapis.com/generativeai-downloads/data/jetpack.png\";\n\nasync function explainImage() {\n  const response = await fetch(image_url);\n  const blob = await response.blob();\n  const image = new Blob([blob], { type: \"image/png\" });\n  tslab.display.png(new Uint8Array(await image.arrayBuffer()));\n  const file = await ai.files.upload({\n    file: image,\n    config: {\n      displayName: \"jetpack.png\",\n    },\n  });\n  let getFile = await ai.files.get({ name: file.name ?? \"\" });\n  while (getFile.state === FileState.PROCESSING) {\n    getFile = await ai.files.get({ name: file.name ?? \"\" });\n    console.log(`current file status: ${getFile.state ?? \"unknown\"}`);\n    console.log(\"File is still processing, retrying in 5 seconds\");\n\n    await new Promise((resolve) =&gt; {\n      setTimeout(resolve, 5000);\n    });\n  }\n  if (file.state === FileState.FAILED) {\n    throw new Error(\"File processing failed.\");\n  }\n  const content: ContentListUnion = [\"Write a short and engaging blog post based on this picture.\"];\n\n  if (file.uri && file.mimeType) {\n    const fileContent = google.createPartFromUri(file.uri, file.mimeType);\n    content.push(fileContent);\n  }\n\n  const data = await ai.models.generateContent({\n    model: \"gemini-2.0-flash\",\n    contents: content,\n  });\n\n  console.log(data.text);\n}\n\n\n// @ts-nocheck - tslab allows top level awaits\nawait explainImage();\n\n\n\n\n\n\n\n\n## Ditch the Traffic, Embrace the Jetpack Backpack!\n\nOkay, picture this: you're stuck in rush hour, fuming as you inch forward. But *what if* you could justâ€¦take off?\n\nWell, my friends, feast your eyes on the future: the Jetpack Backpack! Yes, you read that right. This isn't your average book bag. This sleek, lightweight backpack (that conveniently fits your 18\" laptop) is hiding a secret weapon: **retractable boosters!**\n\nImagine soaring above the gridlock, propelled by clean, steam-powered energy. This isn't just about convenience; it's about a greener commute. And with padded strap support, you can stay comfy during your 15 minutes of flight per charge. Plus, it has USB-C charging, so you're always ready to fly.\n\nIs it real? Maybe not *yet*. But a design like this makes you wonder, what if we really could fly to work one day? \n\nWhat do you think? Would you rock a Jetpack Backpack? Let me know in the comments!\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Quickstarts",
      "Text Generation"
    ]
  },
  {
    "objectID": "docs/index.html",
    "href": "docs/index.html",
    "title": "docs",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "docs/index.html#quarto",
    "href": "docs/index.html#quarto",
    "title": "docs",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "quickstarts/Get_Started.html",
    "href": "quickstarts/Get_Started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Getting Started\n.ipynb files and preview using typescript kernel (tslab) and quarto!\n\nconsole.log(\"Hello World!\");\n\nHello World!\n\n\n\nfunction fib(n: number): number {\n  if (n &lt;= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconsole.log(fib(10)); // Output: 55\n\n55\n\n\n\nconst foo = { class: \"CS 101\" };\nconst x = foo.class;\nconsole.log(x);\n\nCS 101\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Quickstarts",
      "Getting Started"
    ]
  }
]